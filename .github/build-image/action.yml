name: 'Build Docker Image'
description: 'Builds and pushes a Docker image to ECR using docker/build-push-action@v5'

inputs:
  image_name:
    description: 'Name for the Docker image (e.g., "mv-backend", "mv-frontend")'
    required: true
  dockerfile_path:
    description: 'Path to the Dockerfile relative to context'
    required: true
  context_path:
    description: 'Build context path'
    required: false
    default: '.'
  build_args:
    description: 'Build arguments for Docker build (multiline string)'
    required: false
    default: ''
  ecr_repository:
    description: 'ECR repository name/URI for the Docker image'
    required: true
  aws_access_key_id:
    description: 'AWS Access Key ID'
    required: true
  aws_secret_access_key:
    description: 'AWS Secret Access Key'
    required: true
  pat:
    description: 'Personal Access Token for Git operations'
    required: true
  username:
    description: 'Git username for Git operations'
    required: true
  email:
    description: 'Git email for Git operations'
    required: true
  filter_pattern:
    description: 'JSON array of glob patterns to filter changed files (e.g., ["frontend/**", "common/**"])'
    required: false
    default: ''
  disable_multi_arch:
    description: 'Whether to disable multi-architecture builds by setting provenance to false'
    required: false
    default: 'true'
  mutable_tag:
    description: 'Optional tag suffix to use instead of commit SHA (e.g., "latest", "v1.0.0")'
    required: false
    default: ''

outputs:
  image_uri:
    description: "The URI of the built image"
    value: ${{ steps.build.outputs.image_uri }}

runs:
  using: "composite"
  steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    # Removed Buildx and Metadata steps as caching and image type labels are no longer required

    - name: Configure Git for Submodules
      shell: bash
      run: |
        git config --global user.email "${{ inputs.email }}"
        git config --global user.name "${{ inputs.username }}"
        git config --global url.https://${{ inputs.pat }}@github.com/.insteadOf https://github.com/

    - name: Checkout Submodules
      shell: bash
      run: git submodule update --init --recursive

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ inputs.aws_access_key_id }}
        aws-secret-access-key: ${{ inputs.aws_secret_access_key }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: Determine Environment
      id: env-setup
      shell: bash
      run: |
        if [[ "${{ github.ref_name }}" == "main" ]]; then
          echo "env_tag=prod" >> $GITHUB_OUTPUT
        else
          echo "env_tag=dev" >> $GITHUB_OUTPUT
        fi
        # cache_scope logic removed â€“ variable was unused.

    - name: Validate Build Arguments
      shell: bash
      run: |
        # Call validation script to ensure every build-arg is present in the Dockerfile
        bash .github/build-image/validate-build-args.sh --dockerfile "${{ inputs.dockerfile_path }}" --build-args "${{ inputs.build_args }}"

    - name: Build and Push Docker Image
      id: build
      shell: bash
      run: |
        # Determine tag suffix - use mutable_tag if provided, otherwise use commit SHA
        if [[ -n "${{ inputs.mutable_tag }}" ]]; then
          TAG_SUFFIX="${{ inputs.mutable_tag }}"
        else
          TAG_SUFFIX="${{ github.sha }}"
        fi
        
        IMAGE_TAG="${{ inputs.ecr_repository }}:${{ inputs.image_name }}-${{ steps.env-setup.outputs.env_tag }}-$TAG_SUFFIX"
        
        # Convert multiline build arguments into --build-arg flags
        BUILD_ARGS=""
        while IFS= read -r line; do
          [[ -z "$line" ]] && continue
          BUILD_ARGS="$BUILD_ARGS --build-arg $line"
        done <<< "${{ inputs.build_args }}"
        
        # Build the Docker image without caching flags
        docker build \
          --file "${{ inputs.dockerfile_path }}" \
          --tag "$IMAGE_TAG" \
          $BUILD_ARGS \
          "${{ inputs.context_path }}"
        
        # Push the Docker image
        docker push "$IMAGE_TAG"

        # Set output for the image URI
        echo "image_uri=$IMAGE_TAG" >> $GITHUB_OUTPUT
 